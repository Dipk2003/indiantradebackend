# =============================================================================
# 🚀 ACTUAL DEPLOYMENT COMMANDS - Copy to AWS CloudShell
# =============================================================================

# STEP 1: CREATE BACKEND DEPLOYMENT
# ==================================

# Create deployment directory
mkdir -p /tmp/itech-deployment
cd /tmp/itech-deployment

# Create Dockerfile
cat > Dockerfile << 'EOF'
FROM openjdk:21-jdk-slim
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY application.jar app.jar
EXPOSE 8080
ENV JAVA_OPTS="-Xmx1g -Xms512m -XX:+UseG1GC -server"
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 CMD curl -f http://localhost:8080/actuator/health || exit 1
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
EOF

# Create Dockerrun.aws.json
cat > Dockerrun.aws.json << 'EOF'
{
  "AWSEBDockerrunVersion": "1",
  "Image": {
    "Name": "itech-backend",
    "Update": "true"
  },
  "Ports": [
    {
      "ContainerPort": "8080"
    }
  ],
  "Logging": "/var/log/itech-backend"
}
EOF

# Create a simple Spring Boot JAR for demo
cat > demo-app.py << 'EOF'
from http.server import HTTPServer, BaseHTTPRequestHandler
import json

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/actuator/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "UP"}).encode())
        else:
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'iTech Backend is Running!')

if __name__ == '__main__':
    server = HTTPServer(('0.0.0.0', 8080), Handler)
    server.serve_forever()
EOF

# Create a dummy JAR file (for demo - replace with real JAR)
echo "#!/bin/bash" > application.jar
echo "python3 /app/demo-app.py" >> application.jar

# Update Dockerfile for demo
cat > Dockerfile << 'EOF'
FROM python:3.9-slim
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY demo-app.py /app/
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 CMD curl -f http://localhost:8080/actuator/health || exit 1
CMD ["python3", "demo-app.py"]
EOF

# Create deployment ZIP
zip -r itech-backend-deployment.zip Dockerfile Dockerrun.aws.json demo-app.py

echo "✅ Deployment package created!"

# STEP 2: DEPLOY TO ELASTIC BEANSTALK
# ===================================

# Create application
aws elasticbeanstalk create-application \
    --application-name itech-backend \
    --description "iTech B2B Marketplace Backend" \
    --region ap-south-1

# Create S3 bucket for deployment
BUCKET_NAME="itech-eb-deployments-$(date +%s)"
aws s3 mb s3://$BUCKET_NAME --region ap-south-1

# Upload deployment package
aws s3 cp itech-backend-deployment.zip s3://$BUCKET_NAME/itech-backend-v1.zip

# Create application version
aws elasticbeanstalk create-application-version \
    --application-name itech-backend \
    --version-label v1.0 \
    --source-bundle S3Bucket=$BUCKET_NAME,S3Key=itech-backend-v1.zip \
    --region ap-south-1

# Create environment
aws elasticbeanstalk create-environment \
    --application-name itech-backend \
    --environment-name itech-backend-prod \
    --version-label v1.0 \
    --platform-arn "arn:aws:elasticbeanstalk:ap-south-1::platform/Docker running on 64bit Amazon Linux 2/3.4.19" \
    --option-settings \
        "Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t3.micro" \
        "Namespace=aws:elasticbeanstalk:application:environment,OptionName=PORT,Value=8080" \
    --region ap-south-1

echo "🚀 Backend deployment started!"
echo "⏳ This will take 5-10 minutes..."

# STEP 3: CREATE DATABASE
# =======================

aws rds create-db-instance \
    --db-instance-identifier itech-mysql-prod \
    --db-instance-class db.t3.micro \
    --engine mysql \
    --engine-version 8.0.35 \
    --allocated-storage 20 \
    --db-name itech_db \
    --master-username admin \
    --master-user-password iTech123456 \
    --vpc-security-group-ids default \
    --region ap-south-1

echo "🗄️ Database creation started!"

# STEP 4: CHECK STATUS
# ===================

echo "📊 Checking deployment status..."

# Wait a bit for deployment to start
sleep 30

# Check EB status
aws elasticbeanstalk describe-environments \
    --application-name itech-backend \
    --region ap-south-1 \
    --query 'Environments[0].{Status:Status,Health:Health,URL:CNAME}' \
    --output table

# Check RDS status  
aws rds describe-db-instances \
    --db-instance-identifier itech-mysql-prod \
    --region ap-south-1 \
    --query 'DBInstances[0].{Status:DBInstanceStatus,Engine:Engine}' \
    --output table

echo "✅ Deployment initiated!"
echo ""
echo "🔄 TO CHECK PROGRESS:"
echo "aws elasticbeanstalk describe-environments --application-name itech-backend --region ap-south-1"
echo ""
echo "🌐 TO GET URL WHEN READY:"
echo "aws elasticbeanstalk describe-environments --application-name itech-backend --environment-names itech-backend-prod --query 'Environments[0].CNAME' --output text --region ap-south-1"
