# =============================================================================
# iTech Backend - AWS Elastic Beanstalk Environment Configuration
# =============================================================================
# This configuration is specifically designed for AWS deployment with PostgreSQL RDS
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION - AWS ELASTIC BEANSTALK
# =============================================================================
# AWS Elastic Beanstalk uses SERVER_PORT environment variable, not PORT
server.port=${SERVER_PORT:5000}
server.address=0.0.0.0
server.servlet.context-path=

# =============================================================================
# DATABASE CONFIGURATION - AWS RDS POSTGRESQL
# =============================================================================
# PostgreSQL configuration for AWS RDS
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://database-1.ctqksa8y8ew7.ap-south-1.rds.amazonaws.com:5432/indianmartdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:Ultimateroot9838}
spring.datasource.driver-class-name=org.postgresql.Driver

# =============================================================================
# JPA & HIBERNATE CONFIGURATION - AWS POSTGRESQL
# =============================================================================
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_PROPERTIES_HIBERNATE_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.defer-datasource-initialization=false

# PostgreSQL specific JPA properties
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# =============================================================================
# CONNECTION POOL CONFIGURATION - AWS OPTIMIZED
# =============================================================================
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:2}
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.pool-name=iTech-HikariCP-AWS
spring.datasource.hikari.auto-commit=false

# =============================================================================
# CORS CONFIGURATION - AWS
# =============================================================================
spring.web.cors.allowed-origins=${SPRING_WEB_CORS_ALLOWED_ORIGINS:*}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS,HEAD
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# =============================================================================
# ACTUATOR CONFIGURATION - AWS
# =============================================================================
management.endpoints.web.exposure.include=${MANAGEMENT_EXPOSURE:health,info,metrics,prometheus}
management.endpoint.health.show-details=${MANAGEMENT_HEALTH_SHOW_DETAILS:when-authorized}
management.endpoints.web.base-path=${MANAGEMENT_BASE_PATH:/actuator}
management.endpoint.shutdown.enabled=false
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# =============================================================================
# LOGGING CONFIGURATION - AWS
# =============================================================================
logging.level.com.itech.itech_backend=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.engine.jdbc.env.internal.LobCreatorBuilderImpl=WARN
logging.level.org.hibernate.tool.schema=WARN
logging.level.org.hibernate.engine.jdbc.spi.SqlExceptionHelper=ERROR
logging.level.root=INFO
spring.main.banner-mode=off

# =============================================================================
# JWT CONFIGURATION - AWS
# =============================================================================
jwt.secret=${JWT_SECRET:gkrpfkjgspisrejuiej483943034ejogijrolrskjfoigsk}
jwt.expiration-in-ms=${JWT_EXPIRATION_MS:3600000}
jwt.refresh-expiration-in-ms=${JWT_REFRESH_EXPIRATION_MS:86400000}

# =============================================================================
# EMAIL CONFIGURATION - AWS
# =============================================================================
spring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}
spring.mail.port=${SPRING_MAIL_PORT:587}
spring.mail.username=${SPRING_MAIL_USERNAME:}
spring.mail.password=${SPRING_MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# =============================================================================
# EXTERNAL SERVICES - AWS
# =============================================================================
razorpay.key.id=${RAZORPAY_KEY_ID:}
razorpay.key.secret=${RAZORPAY_KEY_SECRET:}
razorpay.currency=INR

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION - AWS
# =============================================================================
openapi.dev-url=http://localhost:8080
openapi.prod-url=https://indiantrademart-backend-env.eba-hc74w6ap.ap-south-1.elasticbeanstalk.com

# =============================================================================
# PERFORMANCE CONFIGURATION - AWS
# =============================================================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=Asia/Kolkata

# Enable compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml
server.compression.min-response-size=1024

# Tomcat thread configuration for AWS
server.tomcat.threads.max=${SERVER_TOMCAT_THREADS_MAX:50}
server.tomcat.threads.min-spare=${SERVER_TOMCAT_THREADS_MIN_SPARE:5}
server.tomcat.accept-count=${SERVER_TOMCAT_ACCEPT_COUNT:100}
server.tomcat.max-connections=${SERVER_TOMCAT_MAX_CONNECTIONS:200}

# =============================================================================
# CACHE CONFIGURATION - AWS
# =============================================================================
spring.cache.type=${SPRING_CACHE_TYPE:caffeine}

# =============================================================================
# ERROR HANDLING - AWS
# =============================================================================
server.error.whitelabel.enabled=false
server.error.include-stacktrace=on_param
server.error.include-message=on_param
server.error.include-binding-errors=on_param
