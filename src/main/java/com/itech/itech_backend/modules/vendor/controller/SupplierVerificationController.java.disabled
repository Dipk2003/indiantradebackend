package com.itech.itech_backend.modules.vendor.controller;

import com.itech.itech_backend.modules.vendor.model.VerificationDocument;
import com.itech.itech_backend.modules.vendor.service.SupplierVerificationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/vendor/verification")
@RequiredArgsConstructor
@Tag(name = "Supplier Verification", description = "APIs for managing supplier verification process")
public class SupplierVerificationController {

    private final SupplierVerificationService verificationService;

    @PostMapping("/documents")
    @Operation(summary = "Upload verification document",
            description = "Upload a new verification document for the vendor")
    @PreAuthorize("hasRole('VENDOR')")
    public ResponseEntity<VerificationDocument> uploadDocument(
            @Parameter(description = "Vendor ID") @RequestParam String vendorId,
            @Parameter(description = "Document type (GST, PAN, etc)") @RequestParam String documentType,
            @Parameter(description = "Document number/identifier") @RequestParam(required = false) String documentNumber,
            @Parameter(description = "Document expiry date") @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime expiryDate,
            @Parameter(description = "Document file") @RequestParam MultipartFile file) {
        
        VerificationDocument document = verificationService.uploadDocument(
                vendorId, documentType, documentNumber, expiryDate, file);
        return ResponseEntity.ok(document);
    }

    @GetMapping("/documents")
    @Operation(summary = "Get vendor documents",
            description = "Get all verification documents for a vendor")
    @PreAuthorize("hasRole('VENDOR') or hasRole('ADMIN')")
    public ResponseEntity<List<VerificationDocument>> getVendorDocuments(
            @Parameter(description = "Vendor ID") @RequestParam String vendorId) {
        
        List<VerificationDocument> documents = verificationService.getVendorDocuments(vendorId);
        return ResponseEntity.ok(documents);
    }

    @GetMapping("/status")
    @Operation(summary = "Get verification status",
            description = "Get current verification status for a vendor")
    @PreAuthorize("hasRole('VENDOR') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, Boolean>> getVerificationStatus(
            @Parameter(description = "Vendor ID") @RequestParam String vendorId) {
        
        Map<String, Boolean> status = verificationService.getVendorVerificationStatus(vendorId);
        return ResponseEntity.ok(status);
    }

    @PutMapping("/documents/{documentId}/verify")
    @Operation(summary = "Verify document",
            description = "Mark a document as verified (Admin only)")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> verifyDocument(
            @Parameter(description = "Document ID") @PathVariable Long documentId) {
        
        verificationService.verifyDocument(documentId);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/documents/{documentId}/reject")
    @Operation(summary = "Reject document",
            description = "Reject a document with reason (Admin only)")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> rejectDocument(
            @Parameter(description = "Document ID") @PathVariable Long documentId,
            @Parameter(description = "Rejection reason") @RequestParam String reason) {
        
        verificationService.rejectDocument(documentId, reason);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/documents/{documentId}/expired")
    @Operation(summary = "Mark document as expired",
            description = "Mark a document as expired (Admin only)")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> markDocumentExpired(
            @Parameter(description = "Document ID") @PathVariable Long documentId) {
        
        verificationService.markDocumentExpired(documentId);
        return ResponseEntity.ok().build();
    }
}
